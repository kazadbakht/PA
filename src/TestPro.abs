module TestPro;

export *;
import * from Params;

fimport IOArray from Data.Array.IO; // the Array type
fimport newArray_ from Data.Array.IO;
fimport readArray from Data.Array.IO;
fimport writeArray from Data.Array.IO;

interface Test {
    Unit test(IOArray<Int,Promise<Int>> arr, Int size, Int f, Int l);
}

class TestPro implements Test {
    Unit test(IOArray<Int,Promise<Int>> arr, Int size, Int f, Int l) {
    //NIKOLAOS: (Test case 1) This is a general test case:
	// If it prints TRUE it means all the cells have got their values -> correct
	// If it prints FLASE it means at least one cell have not got its value -> incorrect
	// If it prints nothing it means some exception happened so that the main cog does not terminate normally -> incorrect 
	// NOTE: You should comment it out while you're measuring the performance since this test case (and the next one) is time-consuming
	// NOTE: This test case covers quite broad spectrum of logical errors
   Int i = 1;
   Int j = 1;
   Bool full = True;
   while (i <= size)
   {
	Promise<Int> yy = readArray(arr, i);
	Bool b = yy.pro_isempty;
	if (b) 
		full = False;
	i = i + 1;
   }
	println("IS FULL = ");
	println(toString(full));

    //NIKOLAOS: (Test case 2) This is a complementary test case for the first one which is even more time-consuming
	// If it prints TRUE it means there is no conflicts for each node (no replicated friends for a person) -> correct
	// If it prints FLASE it means at least one conflict exists (at least one person has a repetitive friend which is wrong based on PA definition) -> incorrect
	// If it prints nothing it means some exception happened so that the main cog does not terminate normally -> incorrect 
	Int temp = f ;
	i = 1;
	Int offset = f - 1;
	Bool noConflict = True;
	while(i <= (l - f + 1) / (2*d())) {
		j = offset + 2;
		while (j <= offset + 2 * d() - 2) {
			Int k = j + 2;
			while (k <= offset + 2 * d()){
				Promise<Int> c1 = readArray(arr, j);
				Promise<Int> c2 = readArray(arr, k);
				Int n1 = c1.pro_get;
				Int n2 = c2.pro_get;
				if (n1 == n2) 
					noConflict = False;
				k = k + 2;
			}
			j = j + 2;
		} 
		offset = offset + 2 * d();
		i = i + 1;
	}
	println("No Conflict? ");
	println(toString(noConflict));

    //NIKOLAOS: (Test case 3) This is just to check whether the summation of the sizes of partitions is equal to the size of the whole array
	// if it prints TRUE, it means it is equal -> correct
	// Otherwise it is FALSE -> incorrect
  }
}
