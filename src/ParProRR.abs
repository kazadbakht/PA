module ParProRR;

//import * from TestPro;
fimport getNumCapabilities from Control.Concurrent;
fimport unsafePerformIO from System.IO.Unsafe;

// The mutable-array operations
fimport IOVector from Data.Vector.Mutable;
fimport unsafeNew from Data.Vector.Mutable;
fimport unsafeRead from Data.Vector.Mutable;
fimport unsafeWrite from Data.Vector.Mutable;

// For generating random numbers
fimport GenIO from System.Random.MWC;
fimport createSystemRandom from System.Random.MWC; // creates new non-fixed seed taken from hardware
fimport uniformR from System.Random.MWC;           

// For measuring execution time
fimport getTime from System.Clock;
fimport diffTimeSpec from System.Clock;
fimport Clock from System.Clock;
fimport TimeSpec from System.Clock;

def Bool isElem<A>(A l, List<A> ls) = case ls {
    Nil => False;
    Cons(l_,ls_) => l == l_ || isElem(l,ls_);
};

// this function is just an alias to an imported function, so it can be automatically lifted&used in the imperative world.
def TimeSpec diff(TimeSpec a, TimeSpec b) = diffTimeSpec(a,b); 

def Int workers() = unsafePerformIO(getNumCapabilities());         // how many workers (threads) running in parallel

def Int d() = 3;               // the attachment (friendliness) degree

def Int num() = 1000000;         // the maximum people we want to simulate

def Int kinit() = d() * (d() + 1); // the given initial clique "social" connections (cells, edges*2) (the initial social is a complete graph)

def Int graphArraySize() = num() * d() ;          // the size of the graph-array. number-of-edges * 2

def Int workerSize() = ((num()) / workers()) * d(); // the size of the chunk of the graph-array for each worker

def IOVector<Promise<Int>> graphArray() = unsafePerformIO(unsafeNew(graphArraySize()+1));

interface IWorker {
  Unit run_();
  Unit init_();
}

class Worker(Int f, Int l, Int workerId) implements IWorker {
   Int aliveDelegates = 0;
   GenIO g;
    
   {
      // create random seed, this is a heavy hardware operation, but it provides a good random seed
      this.g = createSystemRandom(); 
   }

   Unit init_() {
       Promise<Int> c;
	   if (workerId == 1) {
           // START INIT the full clique of the graph
           Int index = 1;
           Int i = 0;                     // i is for the 1st-loop
           Int j = 0;                     // j is for the 2nd-loop
           while (i <= d()) {
               j = 1;
               while (j <= d()) {
	               c = pro_new;
	               index = j + (i * d());
	               if (j <= i) c.pro_give(j); else c.pro_give(-1);
                   unsafeWrite(graphArray(), index, c);
	               j = j + 1;
               }
               i = i + 1;
           }
           // END INIT the full clique of the graph
           // initialize the rest of the worker-1
	       index = kinit + 1;
	       while (index <= l) {
		       c = pro_new;
		       unsafeWrite(graphArray(), index, c);
		       index = index + 1;
	       }
       }
       else {
	     Int index = f;
	     while (index <= l) {
		     c = pro_new;
		     unsafeWrite(graphArray(), index, c);
		     index = index + 1;
	     }
       }
   }

   Unit run_() {
       Int j = 0;
	   Int i = d + 2 + (workerId - 1);
       Int temp = kinit + (workerId - 1) * d;
       Int source = 0;
       Int target = 0;
	   Int u = 0;
       Bool b = False;
       Promise<Int> c;
       while (i <= num) {
           j = 1;
           List<Int> pastDraws = Nil;
           while (j <= d()) {
               source = uniformR(Pair(1,temp*2), this.g);
               target = temp + j;
		       u = 0;
		       if (source > temp) { // this is for the coin flipping, it means that you pick from the shadow array
                   source=source-temp;
			       if (source > kinit())
     				   u = (source - 1) / d() + 1;
			       else 
			       {            // the picked element is from the shadow-clique array
				       c = unsafeRead(graphArray(), source);
				       u = c.pro_get;
				       if (u == -1)   // picked an empty element of initial clique
					       j = j - 1; // so retry
				       else
					       u = (source - 1) / d() + 1;
    	           }
			   }
		       else             // here you pick from the real array
		       {
			       c = unsafeRead(graphArray, source);
			       b = c.pro_isempty;
			       if (b) {
                       aliveDelegates = aliveDelegates + 1;
				       this ! delegate(c, source, target);
			       }
			       else {
				       u = c.pro_get;
				       if (u == -1) j = j - 1;
                   }
		       }

		       if (u > 0) {     // then we got an actual value, so we do conflictCheck
		           if (isElem(u,pastDraws)) j = j - 1;
		           else {
                       pastDraws = Cons(u,pastDraws);
		    	       c = unsafeRead(graphArray(), target);
		    	       c.pro_give(u);
		           }
		       }
		       j = j + 1;
           }
	       i = i + workers;
	       temp = temp + d * workers ;
       }
       // one while loops to wait for all delegates to finish
       await (this.aliveDelegates == 0);

   }

    Unit delegate(Promise<Int> ft, Int source, Int target) {
        await ft$;
        Int u = ft.pro_get;
        Bool b = this.conflictCheck(u, target);
        if (b) {
		    u = ((target - 1)/d()) * d();
            u = uniformR(Pair(1,u), this.g);
     	   	Promise<Int> c = unsafeRead(graphArray, u);
           	this.delegate(c, u, target);
        }
        else {
		    Promise<Int> c = unsafeRead(graphArray, target);
		    c.pro_give(u);
            aliveDelegates = aliveDelegates -1;
        }

    }
    Bool conflictCheck(Int value, Int target) {
        Int i = ((target - 1)/d()) * d() + 1;
        Int lCurrentNode = i + d() - 1;
        Int item = 0;
        Bool found = False;
        Bool b = False;
        Int v = 0;
        Promise<Int> c;
        while (i <= lCurrentNode) {
	        c = unsafeRead(graphArray(), i);
	        b = c.pro_isempty;
	        if (not(b)) {
		        v = c.pro_get;
        	    if (value == v) {
                  	found = True;
                  	i = lCurrentNode + 1; //just to break the while
		        }
            }
            i = i + 1;
        }
        return found;
    }


}


{
 // START creating the workers
 Int i = 1;
 IWorker w;
 Int f = 0;
 Int l = 0;
 List<IWorker> ws = Nil;
 while (i<workers()) {
     f = (i-1) * workerSize() + 1; // start of chunk
     l = i * workerSize();         // end of chunk
     w = new Worker(f, l, i);
     ws = Cons(w,ws);
	 i = i + 1;
 }
 w = new Worker(l + 1, graphArraySize(), i);
 ws = Cons(w,ws);
 // END creating the workers

 //Start parallel initialization of the array by workers
 Fut<Unit> ff;
 List<IWorker> ws_ = ws;
 List<Fut<Unit>> fs = Nil;
 while (ws_ != Nil) {
     w = head(ws_);
	 ff = w ! init_();
     fs = Cons(ff,fs);
     ws_ = tail(ws_);
 }
 //End parallel initialization of the array by workers

 // wait for workers to finish initialize
 while (fs != Nil) {
     ff = head(fs);
	 ff.get;
     fs = tail(fs);
 }
 // START RUNNING
 println("START RUNNING");
 TimeSpec t1 = getTime(Monotonic);
 while (ws != Nil) {
     w = head(ws);
	 ff = w ! run_();  // run each worker
     fs = Cons(ff,fs);
     ws = tail(ws);
 }
 // wait for workers to finish run
 while (fs != Nil) {
     ff = head(fs);
	 ff.get;
     fs = tail(fs);
 }
  TimeSpec t2 = getTime(Monotonic);

  TimeSpec t3 = diff(t2,t1);    //  compute the difference       (t2 - t1)

  println(toString(t3));  

}
