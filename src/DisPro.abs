module DisArr;

import * from Params;
import * from TestArr;

// The mutable-array operations
fimport IOArray from Data.Array.IO; // the Array type
fimport newArray_ from Data.Array.IO;
fimport readArray from Data.Array.IO;
fimport writeArray from Data.Array.IO;

// For having (top-level) global arrays
fimport unsafePerformIO from System.IO.Unsafe;

// // For generating random numbers
fimport randomRIO from System.Random; // randomRIO :: Pair<Low,High> -> IO a

// the edge-array initialization is sequential
// after the array initialization, all workers start working in parallel


def IOArray<Int, Int> graphArray() = unsafePerformIO(newArray_(Pair(1, graphArraySize())));

def IOArray<Int, IWorker> workerArray() = unsafePerformIO(newArray_(Pair(0, workers()))); // TODO: it contains an extra element, change it to (1, workers)


interface IWorker {
  Unit run_();
  Unit init_();
  Unit delegate(Fut<Int> ft, Int target);
}




class Worker(Int f, Int l) implements IWorker {
   IOArray<Int,Fut<Unit>> getsDels;
   Int getBound = 0;
   IOArray<Int,Promise<Int>> localArr;
   Int offset = f - 1;
    
   {
	getBound = (l - f + 1) / 2;
	getsDels = newArray_(Pair(0, getBound));
   }

	Unit init_() {
		Int t = this.l - this.f + 1;
		localArr = newArray_(Pair(1, t));
		Int i = 1;                     // i is for the 1st-loop
		Int j = 0;                     // j is for the 2nd-loop
		Int temp = 1;
		Promise<Int> c;
		if (this.f == k0() + 1) {
			this.offset = 0;
			while (i <= num0() - 1) {
			     j = i + 1;
			     while (j <= num0()) {
				 c = pro_new;
				 c.pro_give(i);
				 writeArray(localArr, temp, c);
				 temp = temp + 1;
				 c = pro_new;
				 c.pro_give(j);
				 writeArray(localArr, temp, c);
				 temp = temp + 1;
				 j = j + 1;
			     }
			     i = i + 1;
			 }
		}
		 

 		Int firstNode = (f - k0() - 1) / (2 * d()) + num0() + 1; // The first node id of the partition
		i = firstNode;
		Int lastNode = firstNode + (l - f + 1) / (2 * d()) - 1;		
		j = 1;
		

 		while (i <= lastNode) {
	 		j = 1;
    			while (j <= d()) {
				c = pro_new;
				c.pro_give(i);
         			writeArray(localArr, temp, c);
	     			temp = temp + 1;
				c = pro_new;
	     			writeArray(localArr, temp, c);
	     			temp = temp + 1;
         			j = j + 1;
     			}
     			i = i + 1;
		}
	}

   Unit run_() {
	Int i = 1;
	Int temp = 0;
	Int getIndex = 1;
	Int j = 0;
	Int pn = workers() -1;
	IWorker otherWorker;
	IPassive p = new local Passive(f);

       // makes new social connections (edges)
       while (i <= (l - f + 1) / (2 * d())) {
           temp = f - 1 + (i-1) * (2 * d());
           j = 2;
           Int source = 0;
           Int target = 0;
           while (j <= 2 * d()) {
		source = randomRIO(Pair(1,temp));
		target = temp + j;
		Int srcIndex = (source - k0() - 1) / workerSize;
		if (srcIndex < 0)  srcIndex = 0; // source in the initial part
		else if (srcIndex > pn) srcIndex = pn; // source in the extra part of the last partition
		otherWorker = readArray(workerArray, srcIndex);
		Fut<Int> fi = otherWorker ! request(source);
		Fut<Unit> fi2 = p ! delegate(fi, target);
		writeArray(getsDels, getIndex, fi2);
		j = j + 2;
		getIndex = getIndex + 1;
           }
           i = i + 1;
       }

       // one while loops to synchronize

       i = 1;
       while (i <= getBound) {
           Fut<Unit> f = readArray(getsDels, i);
	       await f?;
	       i = i + 1;
       }

   }

    Unit delegate(Fut<Int> ft, Int target) {
        await ft?;
        Int u = ft.get;
        Int pn = workers() -1;
        Bool b = this.conflictCheck(u, target);
        if (b) {
		Int te = this.f - 1 + ((target-this.f)/(2*d())) * 2*d();
		Int source = randomRIO(Pair(1,te));
		Int srcIndex = (source - k0() - 1)/ workerSize();
		if (srcIndex < 0) srcIndex = 0;
		else if (srcIndex > pn) srcIndex = pn;
		IWorker otherWorker = readArray(workerArray(), srcIndex);
		Fut<Int> ft_ = otherWorker ! request(source);
		this.delegate(ft_, target);
        }
        else {
		    Promise<Int> c = readArray(localArr, target);
		    c.pro_give(u);
        }

    }
    Bool conflictCheck(Int value, Int target) {
        Int fCurrentNode = this.f + ((target-(this.f))/(2*d())) * (2*d());
        Int lCurrentNode = (fCurrentNode + (2 * d()) - 1);
	fCurrentNode = fCurrentNode - this.offset;
	lCurrentNode = lCurrentNode - this.offset;
        Int i = fCurrentNode + 1;
        Int item = 0;
        Bool found = False;
        Int v = 0;
        while (i <= lCurrentNode) {
	        Promise<Int> c = readArray(localArr, i);
	        Bool b = c.pro_isempty;
	        if (not(b)) {
		    v = c.pro_get;
        	    if (value == v) {
                  	found = True;
                  	i = lCurrentNode + 1; //just to break the while
		        }
            }
            i = i + 2;
        }
        return found;
    }

   Int request(Int source) {
	source = source - this.offset;
	Promise<Int> c = readArray(localArray, source);
	await c$;
	return c.pro_get;
    }

}




{
 // init-clique initializes the started complete sub-graph


 // create workers
 i = 1;
 IWorker w;
 Int l = 0;
 while (i<workers()) {
     Int f = k0() + (i-1) * workerSize() + 1;
     l = k0() + i * workerSize();
     w = new Worker(f, l);
     writeArray(workerArray(), i-1, w);
	 i = i + 1;
 }
 w = new Worker(l + 1, graphArraySize());
 writeArray(workerArray(), workers()-1, w);


 IOArray<Int, Fut<Unit>> syncArray = newArray_(Pair(0, workers())); // TODO: also has to change to (0, workers)

//Start initialization of the array in a parallel way

 Fut<Unit> ff;
i = 0;
 while (i < workers) {
     w = readArray(workerArray(),i);
	 ff = w ! init_();
     writeArray(syncArray, i, ff);
	 i = i + 1;
 }


// wait for workers to make sure all the array is initialized

 i = 0;
 while (i < workers) {
     ff = readArray(syncArray, i);
	 ff.get;
	 i = i + 1;
 }

 // run workers
i = 0;
 while (i < workers) {
     w = readArray(workerArray(),i);
	 ff = w ! run_();
     writeArray(syncArray, i, ff);
	 i = i + 1;
 }

 // wait for workers

 i = 0;
 while (i < workers) {
     ff = readArray(syncArray, i);
	 ff.get;
	 i = i + 1;
 }
 
 //Test t = new local TestArr();
 //t.test(graphArray());
}
