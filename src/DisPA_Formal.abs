module DisPA_Formal;

// For generating random numbers
fimport GenIO from System.Random.MWC;
fimport createSystemRandom from System.Random.MWC; // creates new non-fixed seed taken from hardware
fimport uniformR from System.Random.MWC;

// for faster integral division/modulo
fimport quot from Prelude; 
fimport rem from Prelude; 

def Int div(Int n, Int d) = quot(n,d);  
def Int mod(Int n, Int d) = rem(n,d); 

// Parameters to the PA problem
//////////////////////////
def Int num() = 100;         // the maximum people we want to simulate
def Int d() = 3;               // the attachment (friendliness) degree
def Int kinit() = d() * (d() + 1); // the given initial clique "social" connections (cells, edges*2) (the initial social is a complete graph)
def Int workers() = 4;         // how many workers (threads) running in parallel

// Utility functions
def Bool isElem<A>(A l, List<A> ls) = case ls {
    Nil => False;
    Cons(l_,ls_) => l == l_ || isElem(l,ls_);
};

def List<A> writenth<A>(List<A> l, Int n, A v, List<A> l0) =
	case n {
		0 => concatenate(reverse(l0), Cons(v, tail(l)));
		_ => writenth(tail(l), n-1, v, Cons(head(l), l0));
	};

def Int localIndex(Int index) = div((div(index-1,d())+1 - (d() + 2)),workers())*d() + mod(index-1,d());
def Int actorIndex(Int index) = mod(div(index-1,d())+1 - (d() + 2), workers());

interface IWorker {
  Unit run_();
  Unit init_(List<IWorker> ws);
  Int request(Int source);
}

class Worker(Int workerId, Int size) implements IWorker {
   Int aliveDelegates = 0;
   List<Int> arrr = Nil;
   List<Int> initArrr = Nil;
   List<IWorker> ws2 = Nil;
   GenIO g;
   {
    // create random seed, this is a heavy hardware operation, but it provides a good random seed
    this.g = createSystemRandom();
   }
   Unit init_(List<IWorker> ws) {
	   this.ws2 = ws;
	   arrr = Cons(0, Nil);
	   initArrr = Cons(0, Nil);

     // START INIT clique of the graph
	   Int index = 1;
	   Int i = 0;                     // i is for the 1st-loop
	   Int j = 0;                     // j is for the 2nd-loop
	   while (i <= d()) {
		  j = 1;
		  while (j <= d()) {
		       index = j + (i * d());
		       if (j <= i)
	 		       initArrr = appendright(initArrr, j); 
			else
	 		       initArrr = appendright(initArrr, -1);
		       j = j + 1;
		  }
	    i = i + 1;
	   }

	   // END INIT the full clique of the graph

     // initialize the partition
	   index = 1;
	   while (index <= size) {
	       arrr = appendright(arrr, 0);
	       index = index + 1;
	   }
   }

   Unit run_() {
	   Int j = 0;
	   Int i = d() + 2 + (workerId - 1);
	   Int temp = kinit() + (workerId - 1) * d();
	   Int source = 0;
	   Int target = 0;
	   Int u = 0;
	   while (i <= num()) {
		    j = 1;
		    List<Int> pastDraws = Nil;
		    while (j <= d()) {
			     //source = uniformR(Pair(1,temp*2), this.g);
			     source = uniformR(Pair(1,temp*2), this.g);
			     target = temp + j;
			     u = 0;				
			     if (source > temp) { // this is for the coin flipping, it means that you pick from the shadow array
				      source=source-temp;
				      if (source > kinit()){
					     u = div(source - 1,d()) + 1;
					     if (isElem(u,pastDraws)) 
						    j = j - 1;
					     else {
						    pastDraws = Cons(u,pastDraws);
						    Int lTarget = localIndex(target);
						    arrr = writenth(arrr, lTarget, u, Nil);
					     }
				      }  
				      else {            // the picked element is from the shadow-clique array
					     u = nth(initArrr, source);
					     if (u == -1)   // picked an empty element of initial clique
					       j = j - 1; // so retry
					     else {
						     u = div(source - 1, d()) + 1;
						     if (isElem(u,pastDraws)) j = j - 1;
						     else {
							    pastDraws = Cons(u,pastDraws);
							    Int lTarget = localIndex(target);
							    //println(toString(lTarget));
							    arrr = writenth(arrr, lTarget, u, Nil);
						     }
					     }
				      } 
			     }
			     else {             // here you pick from the real array
				    if (source > kinit()){
					   Int aIndex = actorIndex(source);
					   IWorker w = nth(ws2, aIndex);
					   Fut<Int> fp = w!request(source);
					   this ! delegate(fp, target);
					   aliveDelegates = aliveDelegates + 1;
				    }
				    else {
					   u = nth(initArrr, source);
					   if (u == -1)   // picked an empty element of initial clique
					         j = j - 1;
					   else 
					   if (isElem(u,pastDraws)) 
					        j = j - 1;
					   else {
						    pastDraws = Cons(u,pastDraws);
						    Int lTarget = localIndex(target);
						    arrr = writenth(arrr, lTarget, u, Nil);
					   }
				    }
		       }
		       j = j + 1;
		    } // END second while
		    i = i + workers();
		    temp = temp + d() * workers() ;
     } // END first while
     // one while loops to wait for all delegates to finish
     await this.aliveDelegates == 0;

// For testing
	i = 0;
	j = 0;
	while (i<=div(size, d())-1)
	{
		List<Int> pastDraws = Nil;
		j = 0;
		while (j<=d()-1)
		{
			Int index = i * d() + j ;
			u = nth(arrr, index);
			//println(toString(u));
			if (isElem(u,pastDraws)) 
				println(toString(u));
			if (u == 0) 
				println(toString(u));
			else 
				pastDraws = Cons(u,pastDraws);
			j = j + 1;
		} 
		i = i + 1;
	}

   }

   Int request(Int source){ // to return the requested slot of the worker when it is resolved
	   Int i = 0;
	   if (source > kinit()){
		    Int lSource = localIndex(source);
		    await nth(arrr, lSource) != 0;
		    i = nth(arrr, lSource);
	   }
	   else
		    i = nth(initArrr, source);
	   return i;
   }

   Unit delegate(Fut<Int> ft, Int target) { // if the requested slot belongs to another worker
      await ft?;
      Int u = ft.get;
        
      // START inlined conflictcheck
	    Bool found = False;
	    if (u != -1) {
		    Int i = div((target - 1),d()) * d() + 1;
		    Int lCurrentNode = i + d() - 1;
		    Int item = 0;
		    Maybe<Int> maybeElement = Nothing;
		    Int v = 0;
		    while (i <= lCurrentNode) {
			     Int li = localIndex(i);
			     v = nth(arrr, li);
			     if (u == v) {
				     found = True;
				     i = lCurrentNode + 1; //just to break the while
			     }
			     i = i + 1;
		    }
	   } // END inlined conflictcheck
     if (found || u == -1) { // if conflict happens or it's an -1 from initial clique
		u = div((target - 1),d()) * d();
        	Int u2 = 0;
		while (u2<= kinit())
			//u2 = uniformR(Pair(1,u), this.g);
			u2 = uniformR(Pair(1,u), this.g);
		    Int aIndex = actorIndex(u2);
		    IWorker w = nth(ws2, aIndex);
		    Fut<Int> fp = w!request(u2);
		    this.delegate(fp, target);
     }
     else { // the slot is resolved
		    Int lTarget = localIndex(target);
		    arrr = writenth(arrr, lTarget, u, Nil);
		    aliveDelegates = aliveDelegates -1;
     }
  }
}

// MAIN ///////////
///////////////////
{
 
 // START creating the workers
 Int i = workers();
 IWorker w;
 Int size = div(num() - (d()+1),workers());
 Int off = num() - (d()+1) - size * workers();
 List<IWorker> ws = Nil;
 while (i>0) {
	if (off >= i)
    w = new Worker(i, (size + 1)*d());
	else
		w = new Worker(i, size*d());
	ws = Cons(w,ws);
	i = i - 1;
 }
 // END creating the workers

 //Start parallel initialization of the array by workers
 Fut<Unit> ff;
 List<IWorker> ws_ = ws;
 List<Fut<Unit>> fs = Nil;
 while (ws_ != Nil) {
	w = head(ws_);
	ff = w ! init_(ws);
	fs = Cons(ff,fs);
	ws_ = tail(ws_);
 }
 // wait for workers to finish initialize
 while (fs != Nil) {
     ff = head(fs);
	   ff.get;
     fs = tail(fs);
 }
 //End parallel initialization of the array by workers

 
 // START RUNNING
 println("START RUNNING");
 while (ws != Nil) {
     w = head(ws);
	   ff = w ! run_();  // run each worker
     fs = Cons(ff,fs);
     ws = tail(ws);
 }
 // wait for workers to finish run
 while (fs != Nil) {
     ff = head(fs);
	   ff.get;
     fs = tail(fs);
 }

//BEGIN of getting frequency of the degrees   
//  Int index = 1;
//  Int counter = 0;
//  Int v = 0;
//  Int v2 = 0;
//  IOVector<Int> arr = unsafeNew(num()+1);
//   while(index<= d + 1){
//	write(arr, index, index-1);
//	index = index + 1;
//   }
//   while(index<= num){
//	write(arr, index, d);
//	index = index + 1;
//   }
//  index = 1;
//  while (index <= graphArraySize()){
//	Int aIndex = actorIndex(index);	
//	w = read(ws2, aIndex);	
//	Fut<Int> f = w!request(index);
//	v = f.get;
//	if (v >= 0) 
//	{
//		Int x = read(arr, v);
//		x = x + 1;
//		write(arr, v, x);	
//	}
//	index = index + 1;
//  }

//  i = 0;
//  Int degree=0;
//  while (i<num) {
//	Int j = 1;
//	counter = 0;
//	degree = degree + 1;
//	while (j<= num()){
//		v = read(arr, j);
//		if (v == degree){
//			counter = counter + 1;
//			i = i + 1;
//		}
//		j=j+1;
//	}
//	println(toString(counter));	
//  }
//END of getting frequency of the degrees 

 //Test t = new local TestPro();
 //t.test(graphArray(), graphArraySize() - kinit(), kinit() +1, graphArraySize(), d());
}
