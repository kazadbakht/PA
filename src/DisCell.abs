module DisCell;

import * from Params;
import * from CellImpl;

// The mutable-array operations
fimport IOArray from Data.Array.IO; // the Array type
fimport newArray_ from Data.Array.IO;
fimport readArray from Data.Array.IO;
fimport writeArray from Data.Array.IO;

// For having (top-level) global arrays
fimport unsafePerformIO from System.IO.Unsafe;

// // For generating random numbers
fimport randomRIO from System.Random; // randomRIO :: Pair<Low,High> -> IO a

// the edge-array initialization is sequential
// after the array initialization, all workers start working in parallel


def IOArray<Int, ICell> graphArray() = unsafePerformIO(newArray_(Pair(1, graphArraySize())));

def IOArray<Int, IWorker> workerArray() = unsafePerformIO(newArray_(Pair(0, workers()))); // TODO: it contains an extra element, change it to (1, workers)


interface IWorker {
  Unit run_();
  Unit init_();
}

interface IPassive {
  Unit delegate(Fut<Int> ft, Int source, Int target);
}

class Passive(Int f) implements IPassive {
    Unit delegate(Fut<Int> ft, Int source, Int target) {
        await ft?;
        Int u = ft.get;
        Int pn = workers() -1;
        Bool b = this.conflictCheck(u, target);
        if (b) {
		    Int te = this.f - 1 + ((target-this.f)/(2*d())) * 2*d();
		    Int source = randomRIO(Pair(1,te));
  	   	ICell c = readArray(graphArray(), source);
      		Fut<Int> ft_ = c ! take_();
            	this.delegate(ft_, source, target);
        }
        else {
		    ICell c = readArray(graphArray(), target);
		    Fut<Unit> f = c!put_(u);
        }

    }
    Bool conflictCheck(Int value, Int target) {
        Int fCurrentNode = this.f + ((target-(this.f))/(2*d())) * (2*d());
        Int lCurrentNode = fCurrentNode + (2 * d()) - 1;
        Int i = fCurrentNode + 1;
        Int item = 0;
        Bool found = False;
        Int v = 0;
        while (i <= lCurrentNode) {
	        ICell c = readArray(graphArray(), i);
	        Fut<Bool> fb = c!hasValue();
	        Bool b = fb.get;
	        if (b) {
		        Fut<Int> fi = c!take_();
		        v = fi.get;
        	    if (value == v) {
                  	found = True;
                  	i = lCurrentNode + 1; //just to break the while
		        }
            }
            i = i + 2;
        }
        return found;
    }
}


class Worker(Int f, Int l) implements IWorker {
   IOArray<Int,Fut<Unit>> getsDels;
   Int getBound = 0;
   IOArray<Int,ICell> localArr;
    
   {
    getBound = (l - f + 1) / 2;
	getsDels = newArray_(Pair(0, getBound));
   }

	Unit init_() {
		Int temp = f;
 		Int firstNode = (f - k0() - 1) / (2 * d()) + num0() + 1; // The first node id of the partition
		Int i = firstNode;
		Int lastNode = firstNode + (l - f + 1) / (2 * d()) - 1;		
		Int j = 1;
		ICell c;
 		while (i <= lastNode) {
	 		j = 1;
    			while (j <= d()) {
         			c = new Cell();
         			Fut<Unit> f = c!put_(i);
         			f.get;
         			writeArray(graphArray(), temp, c);
	     			c = new Cell();
	     			temp = temp + 1;
	     			writeArray(graphArray(), temp, c);
         			temp = temp + 1;
         			j = j + 1;
     			}
     			i = i + 1;
		}

		Int t = l - f + 1;
		localArr = newArray_(Pair(1, t));
		temp = f;
 		firstNode = (f - k0() - 1) / (2 * d()) + num0() + 1; // The first node id of the partition
		i = firstNode;
		lastNode = firstNode + (l - f + 1) / (2 * d()) - 1;		
		j = 1;
		
 		while (i <= lastNode) {
	 		j = 1;
    			while (j <= d()) {
         			c = new Cell();
         			Fut<Unit> f2 = c!put_(i);
         			f2.get;
				t = temp - f + 1;
         			writeArray(localArr, t, c);
	     			c = new Cell();
	     			temp = temp + 1;
				t = t + 1;
	     			writeArray(localArr, temp - f + 1, c);
         			temp = temp + 1;
         			j = j + 1;
     			}
     			i = i + 1;
		}
		i = 1;
		Int part =  0;
		while (i<=t){
			c = readArray(localArr, i);
			Fut<Int> b = c!take2();
			Int b2 = b.get;
			part = part + b2;
			i = i + 1;		
		}
		println(toString(part));
		
	}

   Unit run_() {
       Int i = 1;
       Int temp = 0;
	   Int getIndex = 1;
       Int j = 0;
       Int pn = workers() -1;

	   IWorker otherWorker;
       IPassive p = new local Passive(f);

       // makes new social connections (edges)
       while (i <= (l - f + 1) / (2 * d())) {
           temp = f - 1 + (i-1) * (2 * d());
           j = 2;
           Int source = 0;
           Int target = 0;
           while (j <= 2 * d()) {
               source = randomRIO(Pair(1,temp));
               target = temp + j;
		ICell c = readArray(graphArray(), source);
	       Fut<Int> fi = c ! take_();
               Fut<Unit> fi2 = p ! delegate(fi, source, target);
		       writeArray(getsDels, getIndex, fi2);
               j = j + 2;
		       getIndex = getIndex + 1;
           }
           i = i + 1;
       }

       // one while loops to synchronize

       i = 1;
       while (i <= getBound) {
           Fut<Unit> f = readArray(getsDels, i);
	       await f?;
	       i = i + 1;
       }

   }

}




{
 // init-clique initializes the started complete sub-graph
 Int index = 1;
 Int i = 1;                     // i is for the 1st-loop
 Int j = 0;                     // j is for the 2nd-loop
 Fut<Unit>  fu;                 // each edge created is (i,j)
 ICell c;
 while (i <= num0() -1) {
     j = i + 1;
     while (j <= num0()) {
         c = new Cell();
         fu = c!put_(i);
         fu.get;
         writeArray(graphArray(), index, c);
         index = index + 1;
         c = new Cell();
         fu = c!put_(j);
         fu.get;
         writeArray(graphArray(), index, c);
         index = index + 1;
         j = j + 1;
     }
     i = i + 1;
 }

 // create workers
 i = 1;
 IWorker w;
 Int l = 0;
 while (i<workers()) {
     Int f = k0() + (i-1) * workerSize() + 1;
     l = k0() + i * workerSize();
     w = new Worker(f, l);
     writeArray(workerArray(), i-1, w);
	 i = i + 1;
 }
 w = new Worker(l + 1, graphArraySize());
 writeArray(workerArray(), workers()-1, w);


 IOArray<Int, Fut<Unit>> syncArray = newArray_(Pair(0, workers())); // TODO: also has to change to (0, workers)

//Start initialization of the array in a parallel way

 Fut<Unit> ff;
i = 0;
 while (i < workers) {
     w = readArray(workerArray(),i);
	 ff = w ! init_();
     writeArray(syncArray, i, ff);
	 i = i + 1;
 }


// wait for workers to make sure all the array is initialized

 i = 0;
 while (i < workers) {
     ff = readArray(syncArray, i);
	 ff.get;
	 i = i + 1;
 }

 // run workers
i = 0;
 while (i < workers) {
     w = readArray(workerArray(),i);
	 ff = w ! run_();
     writeArray(syncArray, i, ff);
	 i = i + 1;
 }

 // wait for workers

 i = 0;
 while (i < workers) {
     ff = readArray(syncArray, i);
	 ff.get;
	 i = i + 1;
 }
//NIKOLAOS: (Test case 1) This is a general test case:
	// If it prints TRUE it means all the cells have got their values -> correct
	// If it prints FLASE it means at least one cell have not got its value -> incorrect
	// If it prints nothing it means some exception happened so that the main cog does not terminate normally -> incorrect 
	// NOTE: You should comment it out while you're measuring the performance since this test case (and the next one) is time-consuming
	// NOTE: This test case covers quite broad spectrum of logical errors
    i = 1;
    Bool full = True;
    while (i <= graphArraySize())
    {
	ICell yy = readArray(graphArray, i);
	Fut<Int> f =  yy!take2();
	Int ii = f.get;
	if (ii == 0) 
		full = False;
	i = i + 1;
    }
	println("IS FULL = ");
	println(toString(full));

//NIKOLAOS: (Test case 2) This is a complementary test case for the first one which is even more time-consuming
	// If it prints TRUE it means there is no conflicts for each node (no replicated friends for a person) -> correct
	// If it prints FLASE it means at least one conflict exists (at least one person has a repetitive friend which is wrong based on PA definition) -> incorrect
	// If it prints nothing it means some exception happened so that the main cog does not terminate normally -> incorrect 
	Int temp = k0() + 1 ;
	i = 1;
	Int offset = k0();
	Bool noConflict = True;
	while(i <= num() - num0()) {
		j = offset + 2;
		while (j <= offset + 2 * d() - 2) {
			Int k = j + 2;
			while (k <= offset + 2 * d()){
				ICell c1 = readArray(graphArray(), j);
				ICell c2 = readArray(graphArray(), k);
				Fut<Int> f1 = c1!take2();
				Fut<Int> f2 = c2!take2();
				Int n1 = f1.get;
				Int n2 = f2.get;
				if (n1 == n2) 
					noConflict = False;
				k = k + 2;
			}
			j = j + 2;
		} 
		offset = offset + 2 * d();
		i = i + 1;
	}
	println("No Conflict? ");
	println(toString(noConflict));

//NIKOLAOS: (Test case 3) This is just to check whether the summation of the sizes of partitions is equal to the size of the whole array
	// if it prints TRUE, it means it is equal -> correct
	// Otherwise it is FALSE -> incorrect
	

}
