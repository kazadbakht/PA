module ParArrRR;

//import * from TestPro;
fimport getNumCapabilities from Control.Concurrent;
fimport unsafePerformIO from System.IO.Unsafe;

// The mutable-array operations
fimport IOVector from Data.Vector.Mutable;
fimport unsafeNew from Data.Vector.Mutable;
fimport unsafeRead from Data.Vector.Mutable;
fimport unsafeWrite from Data.Vector.Mutable;

// For generating random numbers
fimport GenIO from System.Random.MWC;
fimport createSystemRandom from System.Random.MWC; // creates new non-fixed seed taken from hardware
fimport uniformR from System.Random.MWC;           

// For measuring execution time
fimport getTime from System.Clock;
fimport diffTimeSpec from System.Clock;
fimport Clock from System.Clock;
fimport TimeSpec from System.Clock;

fimport quot from Prelude;
fimport rem from Prelude;

// faster integral-only division
def Int div(Int n, Int d) = quot(n,d);

// faster integral-only modulo
def Int mod(Int n, Int d) = rem(n,d);

def Bool isElem<A>(A l, List<A> ls) = case ls {
    Nil => False;
    Cons(l_,ls_) => l == l_ || isElem(l,ls_);
};

// this function is just an alias to an imported function, so it can be automatically lifted&used in the imperative world.
def TimeSpec diff(TimeSpec a, TimeSpec b) = diffTimeSpec(a,b); 

def Int workers() = unsafePerformIO(getNumCapabilities());         // how many workers (threads) running in parallel

def Int d() = 3;               // the attachment (friendliness) degree

def Int num() = 1000000;         // the maximum people we want to simulate

def Int kinit() = d() * (d() + 1); // the given initial clique "social" connections (cells, edges*2) (the initial social is a complete graph)

def Int graphArraySize() = num() * d() ;          // the size of the graph-array. number-of-edges * 2

def Int workerSize() = div((num()) , workers()) * d(); // the size of the chunk of the graph-array for each worker

def IOVector<Int> graphArray() = unsafePerformIO(unsafeNew(graphArraySize()+1));

def IOVector<List<Int>> stor() = unsafePerformIO(unsafeNew(graphArraySize()+1));

def IOVector<IWorker> ws2() = unsafePerformIO(unsafeNew(workers()+1)); // the only mutable shared resource, i.e., the array of workers 

def Int actorIndex(Int index) = mod((div((index-1),d())+1 - (d() + 2)),workers());

interface IWorker {
  Unit run_();
  Unit init_();
  Unit request(Int source, Int target);
  Unit resolve(Int ft, Int target);
}

class Worker(Int f, Int l, Int workerId) implements IWorker {
   Int aliveDelegates = 0;
   GenIO g;
    
   {
      // create random seed, this is a heavy hardware operation, but it provides a good random seed
      this.g = createSystemRandom(); 
   }

   Unit init_() {
       Int c =0;
	   if (workerId == 1) {
           // START INIT the full clique of the graph
           Int index = 1;
           Int i = 0;                     // i is for the 1st-loop
           Int j = 0;                     // j is for the 2nd-loop
           while (i <= d()) {
               j = 1;
               while (j <= d()) {
	               index = j + (i * d());
	               if (j <= i) c = j; else c = -1;
                   unsafeWrite(graphArray(), index, c);
	               j = j + 1;
               }
               i = i + 1;
           }
           // END INIT the full clique of the graph
           // initialize the rest of the worker-1
	       index = kinit() + 1;
	       while (index <= l) {
		       unsafeWrite(graphArray(), index, 0);
		       index = index + 1;
	       }
       }
       else {
	     Int index = f;
	     while (index <= l) {
		     unsafeWrite(graphArray(), index, 0);
		     index = index + 1;
	     }
       }

	c = 1;
	while (c<=graphArraySize()){
		unsafeWrite(stor(), c, Nil);
		c = c+ 1;
	}
   }

   Unit run_() {
       Int j = 0;
	   Int i = d() + 2 + (workerId - 1);
       Int temp = kinit() + (workerId - 1) * d();
       Int source = 0;
       Int target = 0;
	   Int u = 0;
       Int c = 0;
       Maybe<Int> maybeElement = Nothing;
       while (i <= num()) {
           j = 1;
           List<Int> pastDraws = Nil;
           while (j <= d()) {
		source = uniformR(Pair(1,temp*2), this.g);
		target = temp + j;
		u = 0;
		if (source > temp) { // this is for the coin flipping, it means that you pick from the shadow array
			source=source-temp;
			if (source > kinit())
			   u = div((source - 1), d()) + 1;
			else 
			{            // the picked element is from the shadow-clique array
			       u = unsafeRead(graphArray(), source);
			       if (u == -1)   // picked an empty element of initial clique
				       j = j - 1; // so retry
			       else
				       u = div((source - 1) , d()) + 1;
			}
		}
		else             // here you pick from the real array
		{
			u = unsafeRead(graphArray(), source);
			if (u != 0) 
				{if (u == -1) j = j - 1;}
			else {
				aliveDelegates = aliveDelegates + 1;
				Int aIndex = actorIndex(source);
				IWorker w = unsafeRead(ws2(), aIndex);
				Fut<Unit> fp = w!request(source, target);
			}
		}

		if (u > 0) {     // then we got an actual value, so we do conflictCheck
		   if (isElem(u,pastDraws)) j = j - 1;
		   else {
			pastDraws = Cons(u,pastDraws);
			unsafeWrite(graphArray(), target, u);
			List<Int> l = unsafeRead(stor(), target);
			while (l != Nil) {
				Int t = head(l);
				Int at = actorIndex(t);
				println(toString(at));
				IWorker w = unsafeRead(ws2(), at);
				w ! resolve(u,t);
                                l = tail(l);
                        }
		   }
		}
		       j = j + 1;
           }
	   i = i + workers();
	   temp = temp + d() * workers() ;
       }
       // one while loops to wait for all delegates to finish
       await (this.aliveDelegates == 0);

   }


    Unit request(Int source, Int target){
	Int value = unsafeRead(graphArray(), source);
	if  (value != 0)
	{
		Int at = actorIndex(target);
		IWorker w = unsafeRead(ws2(), at);
		w ! resolve(value, target);
	}
	else
	{
        	List<Int> l = unsafeRead(stor(), source);
    		unsafeWrite(stor(), source, Cons(target,l));
	} 
    }
    Unit resolve(Int ft, Int target) {
        // START inlined conflictcheck
        Int i = div((target - 1),d()) * d() + 1;
        Int lCurrentNode = i + d() - 1;
        Int item = 0;
        Bool found = False;
        Int v = 0;
        Int c=0;
        while (i <= lCurrentNode) {
	        v = unsafeRead(graphArray(), i);
		if (ft == v) {
			found = True;
			i = lCurrentNode + 1; //just to break the while
		}
		i = i + 1;
        }
        // END inlined conflictcheck
        if (found) {
		Int source = 0;
		v = -1;
		while (v == -1) {
			v = div((target - 1),d()) * d();
			source = uniformR(Pair(1,v), this.g);
			v = unsafeRead(graphArray(), source);
		}
		if (v!=0)
			this.resolve(v, target);
		else
		{
			Int aIndex = actorIndex(source);
			IWorker w = unsafeRead(ws2(), aIndex);
			Fut<Unit> fp = w!request(source, target);
		}
	}
        else {
		unsafeWrite(graphArray(), target, ft);
		List<Int> l = unsafeRead(stor(), target);
		while (l != Nil) {
			Int t = head(l);
			Int at = actorIndex(t);
			IWorker w = unsafeRead(ws2(), at);
			w ! resolve(ft,t);
		        l = tail(l);
		}
		aliveDelegates = aliveDelegates -1;
        }

    }


}


{
 // START creating the workers
 Int i = 1;
 IWorker w;
 Int f = 0;
 Int l = 0;
 List<IWorker> ws = Nil;
 while (i<workers()) {
     f = (i-1) * workerSize() + 1; // start of chunk
     l = i * workerSize();         // end of chunk
     w = new Worker(f, l, i);
     ws = Cons(w,ws);
     unsafeWrite(ws2(), i-1, w); 
	 i = i + 1;
 }
 w = new Worker(l + 1, graphArraySize(), i);
 ws = Cons(w,ws);
 unsafeWrite(ws2(), i-1, w);
 // END creating the workers

 //Start parallel initialization of the array by workers
 Fut<Unit> ff;
 List<IWorker> ws_ = ws;
 List<Fut<Unit>> fs = Nil;
 while (ws_ != Nil) {
     w = head(ws_);
	 ff = w ! init_();
     fs = Cons(ff,fs);
     ws_ = tail(ws_);
 }
 //End parallel initialization of the array by workers

 // wait for workers to finish initialize
 while (fs != Nil) {
     ff = head(fs);
	 ff.get;
     fs = tail(fs);
 }

 // START RUNNING
 println("START RUNNING");
 TimeSpec t1 = getTime(Monotonic);
 while (ws != Nil) {
     w = head(ws);
	 ff = w ! run_();  // run each worker
     fs = Cons(ff,fs);
     ws = tail(ws);
 }
 // wait for workers to finish run
 while (fs != Nil) {
     ff = head(fs);
	 ff.get;
     fs = tail(fs);
 }
  TimeSpec t2 = getTime(Monotonic);

  TimeSpec t3 = diff(t2,t1);    //  compute the difference       (t2 - t1)

  println(toString(t3));  
//i = 1;
//while (i<= graphArraySize()){
//	Int pp = unsafeRead(graphArray(), i);
//	println(toString(pp));
//	i = i + 1;
//}
 //Test t = new local TestPro();
 //t.test(graphArray(), graphArraySize() - kinit(), kinit() +1, graphArraySize(), d());

}
