module SeqArr;

import * from Params;
import * from TestArr;

fimport IOArray from Data.Array.IO; // the Array type
fimport newArray_ from Data.Array.IO;
fimport readArray from Data.Array.IO;
fimport writeArray from Data.Array.IO;
fimport randomRIO from System.Random;

interface IPASeq {
	Unit run_();
	Unit initClique();
	Unit initRemain();
	
}

class PASeq(IOArray<Int, Int> arr) implements IPASeq{

    Unit run_(){
	this.initClique();
	this.initRemain();
	Int i = 1;
	while (i <= (graphArraySize() - k0()) / (2 * d())) {
            Int temp = k0() + (i-1) * (2 * d());
            Int j = 2;
            Int source = 0;
            Int target = 0;
            while (j <= 2 * d()) {
		source = randomRIO(Pair(1,temp));
                target = temp + j;
		Int value = readArray(arr, source);
		Bool conflict = False;
		Int tt = temp + 2;
		while(tt < target)
		{
			Int a = readArray(arr, tt);
			if (value == a)
				{conflict = True;}
			tt = tt + 2;
		}
		if (~conflict)
                {
			j = j + 2;
			writeArray(arr, target, value);
		}
           }
            i = i + 1;
        }
    }
    Unit initClique() {
        Int index = 1;
        Int i = 1;
        Int j = 0;
        while (i <= num0() -1) {
            j = i + 1;
            while (j <= num0()) {
		writeArray(this.arr, index, i);
                index = index + 1;
		writeArray(this.arr, index, j);
                index = index + 1;
                j = j + 1;
            }
            i = i + 1;
        }
	i = 1;
    }


    Unit initRemain() {
     Int temp = k0() + 1;
     Int i = num0() + 1;
     Int j = 1;
     while (i <= num()) {
	j = 1;
        while (j <= d()) {
	     writeArray(this.arr, temp, i);
	     temp = temp + 1;
	     writeArray(this.arr, temp, 0);
             temp = temp + 1;
             j = j + 1;
        }
        i = i + 1;
    }
   }
}


{
	IOArray<Int,Int> arr = newArray_(Pair(1, graphArraySize()));
	IPASeq seq = new PASeq(arr);
	Fut<Unit> f = seq!run_();
	f.get;

    Test t = new local TestArr();
    t.test(arr);

}
